var letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', ' ', ''];

var bg;

var songSelectText;

var backing;
var portrait;

var lArrow;
var rArrow;

var curSongText;

var completed;
var gameplayChangers;

var songs = [
    'Gacha',
    'White Eyes',
    'Substitute',
    'Calamity',
    'Error',
    'Entropy',
    'Jumpman',
    'The Show',
    'Ebullient'
];

var portraitTags = [
    'gacha',
    'herobrine',
    'substitute',
    'cr00l',
    'error',
    'badcop',
    'x.nes',
    'bobby rhino',
    'alice',
    'mouth moods'
];

var songToTag = [
    'Gacha' => 'gacha',
    'White Eyes' => 'herobrine',
    'Substitute' => 'substitute',
    'Calamity' => 'cr00l',
    'Error' => 'error',
    'Entropy' => 'badcop',
    'Jumpman' => 'x.nes',
    'The Show' => 'bobby rhino',
    'Ebullient' => 'alice',
    'Wow Wow' => 'mouth moods'
];

var selec = 0;
var skipped = false;

var vertSelec = 0;

var transitioning = false;

function create()
{
    DiscordClient.changePresence('Song Select');

    if (FlxG.save.data.hcSongIndex == null)
        FlxG.save.data.hcSongIndex = selec;

    selec = FlxG.save.data.hcSongIndex;
    FlxG.save.flush();

    // unlock neil if you've completed every song
    var allDone = true;
    for (song in songs)
        if (!FlxG.save.data.hcData[song])
            allDone = false;

    if (allDone)
        songs += 'Wow Wow';

    bg = new FlxSprite().loadSparrow('custom_states/song select', 'song');
    bg.animation.addByPrefix('intro', 'intro', 5, false);
    bg.animation.addByPrefix('loop', 'loop', 5, true);

    bg.scale.set(2.3, 2.3);
    bg.updateHitbox();

    bg.offset.x = -300;

    bg.alpha = 0;
    FlxTween.tween(bg, {alpha: 1}, 2, {startDelay: 1});

    add(bg);

    bg.animation.finishCallback = (name)->
    {
        bg.animation.play('loop');
        bg.animation.finishCallback = null;

        addUI();

        FlxG.camera.flash(0xFF000000);
        skipped = true;
    }

    bg.animation.play('intro');
    bg.screenCenter();
}

var tweening = false;
var mPos = {x: FlxG.width / 2, y: FlxG.height / 2}
var keyboard = false;

function update(dt)
{
    if (controls.BACK && skipped) goBack();

    if (controls.ACCEPT && skipped && !transitioning) vertSelec == 0 ? portrait.onClick() : gameplayChangers.onClick();
    if (controls.ACCEPT && !skipped) bg.animation.finish();

    if (controls.UI_LEFT_P)
    {
        keyboard = true;
        lArrow.onClick();
    } 
    if (controls.UI_RIGHT_P)
    {
        keyboard = true;
        rArrow.onClick();
    } 

    if (controls.UI_UP_P) changeVerticalSelection(-1);
    if (controls.UI_DOWN_P) changeVerticalSelection(1);

    if (FlxG.mouse.justMoved && !tweening) FlxTween.cancelTweensOf(mPos);
}

function changeSelection(amt)
{
    if (transitioning)
        return;
        
    selec += amt;

    if (selec == songs.length)
        selec = 0;
    if (selec <= -1)
        selec = songs.length - 1;

    portrait.animation.play(songToTag[songs[selec]]);
    portrait.updateHitbox();

    portrait.screenCenter();

    curSongText.text = songs[selec];
    curSongText.x = FlxG.width / 2 - curSongText.width / 2;

    FlxTween.cancelTweensOf(curSongText.scale);
    curSongText.scale.set(6, 6);

    FlxTween.tween(curSongText.scale, {x: 5, y: 5}, 1.3, {ease: FlxEase.expoOut});

    FlxG.save.data.hcSongIndex = selec;
    FlxG.save.flush();

    if (keyboard)
        changeVerticalSelection(0);

    keyboard = false;

    var prevVis = completed.alpha == 1;
    var vis = FlxG.save.data.hcData[songs[selec]];

    if (prevVis == vis)
        return;
    
    FlxTween.cancelTweensOf(completed.scale);

    switch(vis)
    {
        case true:
            completed.alpha = 1;

            completed.scale.set(0.7, 0.7);
            FlxTween.tween(completed.scale, {x: 0.6, y: 0.6}, 1, {ease: FlxEase.expoOut});

        case false:
            completed.alpha = 0.999;
            FlxTween.tween(completed.scale, {x: 0, y: 0}, 0.35, {ease: FlxEase.backIn});
    }
}

function changeVerticalSelection(amt)
{
    if (transitioning)
        return;

    vertSelec += amt;

    if (vertSelec > 1)
        vertSelec = 0;
    if (vertSelec < 0)
        vertSelec = 1;

    var sprite = vertSelec == 0 ? portrait : gameplayChangers;

    tweening = true;

    FlxTween.cancelTweensOf(mPos);
    FlxTween.tween(mPos, {x: sprite.x + sprite.width - 30, y: sprite.y + sprite.height - 25}, 0.5, {ease: FlxEase.expoOut, onUpdate: (_)->
    {
        Lib.application.window.warpMouse(mPos.x, mPos.y);
    }, onComplete: (t)->
    {
        tweening = false;
    }});
}

var ARROW_X_OFFSET = 3;
var ARROW_Y_OFFSET = 5;

var finishedAnim = {
    left: true,
    right: true
}

function addUI()
{
    songSelectText = new FlxSprite().loadSparrow('custom_states/song select', 'select');
    songSelectText.animation.addByPrefix('idle', 'select', 8, true);
    songSelectText.animation.play('idle');
    songSelectText.scale.set(0.5, 0.5);
    songSelectText.updateHitbox();
    songSelectText.screenCenter();
    songSelectText.y -= 290;

    backing = new FlxSprite().loadSparrow('custom_states/song select', 'backing');
    backing.animation.addByPrefix('idle', 'backing', 8, true);
    backing.animation.play('idle');
    backing.scale.set(0.6, 0.6);
    backing.updateHitbox();
    backing.screenCenter();

    lArrow = new InteractableSprite();
    lArrow.frames = Paths.modsSparrow('custom_states/general', 'left-arrow');
    lArrow.animation.addByPrefix('idle', 'left-arrow', 8, true);
    lArrow.animation.addByPrefix('use', 'use', 18, false);
    lArrow.animation.play('idle');

    lArrow.screenCenter();
    lArrow.x -= 300;

    lArrow.onClick = ()->
    {
        lArrow.animation.play('use', true);

        if (finishedAnim.left)
        {
            lArrow.x -= ARROW_X_OFFSET;
            lArrow.y -= ARROW_Y_OFFSET;
        }

        finishedAnim.left = false;

        lArrow.animation.finishCallback = ()->
        {
            lArrow.animation.play('idle');
            lArrow.animation.finishCallback = null;

            lArrow.x += ARROW_X_OFFSET;
            lArrow.y += ARROW_Y_OFFSET;

            finishedAnim.left = true;
        }

        changeSelection(-1);
    }

    rArrow = new InteractableSprite();
    rArrow.frames = Paths.modsSparrow('custom_states/general', 'right-arrow');
    rArrow.animation.addByPrefix('idle', 'right-arrow', 8, true);
    rArrow.animation.addByPrefix('use', 'use', 18, false);
    rArrow.animation.play('idle');

    rArrow.screenCenter();
    rArrow.x += 300;

    rArrow.onClick = ()->
    {
        rArrow.animation.play('use', true);

        if (finishedAnim.right)
        {
            rArrow.x -= ARROW_X_OFFSET;
            rArrow.y -= ARROW_Y_OFFSET;
        }

        finishedAnim.right = false;

        rArrow.animation.finishCallback = ()->
        {
            rArrow.x += ARROW_X_OFFSET;
            rArrow.y += ARROW_Y_OFFSET;

            rArrow.animation.play('idle');
            rArrow.animation.finishCallback = null;

            finishedAnim.right = true;
        }

        changeSelection(1);
    }

    portrait = new InteractableSprite().loadSparrow('custom_states/song select', 'portraits');
    for (tag in portraitTags)
        portrait.animation.addByPrefix(tag, tag, 8, true);

    portrait.scale.set(0.6, 0.6);
    portrait.animation.play(songToTag[songs[selec]]);
    portrait.updateHitbox();

    portrait.screenCenter();

    portrait.onClick = ()->
    {
        if (transitioning)
            return;

        PlayState.SONG = Song.loadFromJson(songs[selec], true);

        PlayState.difficulty = '';
        PlayState.storyDifficulty = 1;
        PlayState.storyWeek = 1;

        LoadingState.loadAndSwitchState(new PlayState());
    }

    curSongText = new FlxText(0, 0, -1, songs[selec]);
    curSongText.setFormat(Paths.modsFont('xp'), 16);
    curSongText.italic = true;
    curSongText.antialiasing = false;
    curSongText.screenCenter();
    curSongText.y += 300;

    curSongText.borderStyle = FlxTextBorderStyle.OUTLINE;
    curSongText.borderSize = 1;
    curSongText.borderColor = 0xFF000000;

    curSongText.scale.set(5, 5);

    var completedCurSong = FlxG.save.data.hcData[songs[selec]];

    completed = new FlxSprite().loadSparrow('custom_states/song select', 'completed');
    completed.animation.addByPrefix('idle', 'completed', 8, true);
    completed.animation.play('idle');
    completed.alpha = completedCurSong ? 1 : 0.999;

    completed.scale.set(completedCurSong ? 0.6 : 0, completedCurSong ? 0.6 : 0);
    completed.updateHitbox();

    completed.screenCenter();
    completed.x += 235;
    completed.y += 235;

    gameplayChangers = new InteractableSprite().loadSparrow('custom_states/song select', 'gameplay changers');
    gameplayChangers.animation.addByPrefix('idle', 'gameplay changers', 8, true);
    gameplayChangers.animation.play('idle');

    gameplayChangers.scale.set(0.6, 0.6);
    gameplayChangers.updateHitbox();

    gameplayChangers.screenCenter();
    gameplayChangers.x -= 235;
    gameplayChangers.y += 235;

    gameplayChangers.onClick = ()-> { trace(':)'); }

    add(backing);
    add(songSelectText);
    add(portrait);

    add(lArrow);
    add(rArrow);

    add(curSongText);

    add(completed);
    add(gameplayChangers);
}

function goBack()
{
    transitioning = true;

    for (item in [backing, portrait, songSelectText, curSongText, lArrow, rArrow, gameplayChangers, completed])
        FlxTween.tween(item, {alpha: 0}, 1, {ease: FlxEase.expoOut, onComplete: (t)->
        {
            item.destroy();
        }});

    bg.animation.play('intro', true, true);
    bg.animation.finishCallback = null;
    bg.animation.timeScale = 2;
    FlxTween.tween(bg, {alpha: 0}, 1, {startDelay: 2, onComplete: (t)->
    {
        LoadingState.loadAndSwitchCustomState('MainMenuState');
    }});
}